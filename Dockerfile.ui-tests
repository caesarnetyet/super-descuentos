FROM golang:1.23.2

# Instalar Chromium y otras dependencias
RUN apt-get update && apt-get install -y \
    chromium \
    chromium-driver \
    curl \
    wget \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Configurar variable de entorno para ChromeDP
ENV CHROME_BIN=/usr/bin/chromium

# Instalar go-junit-report
RUN go install github.com/jstemmer/go-junit-report/v2@latest

# Directorio de trabajo
WORKDIR /app

# Crear directorio para screenshots

# Copiar archivos del proyecto
COPY go.mod go.sum ./
RUN go mod download

# Copiar el resto del cÃ³digo
COPY . .

# Script para ejecutar las pruebas con mejor logging
RUN echo '#!/bin/bash\n\
mkdir -p reports\n\
mkdir -p screenshots\n\
    chmod 777 /app/screenshots && \n\
\n\
echo "Checking network..."\n\
echo "DNS Resolution:"\n\
getent hosts app\n\
\n\
echo "Waiting for application to be ready..."\n\
until nc -z app 8080; do\n\
echo "Waiting for application to start..."\n\
sleep 1\n\
done\n\
\n\
echo "Application port is open. Testing HTTP connection:"\n\
curl -v $APP_URL/web/posts || true\n\
\n\
echo "Running tests with debug output..."\n\
CHROMEDP_LOG=debug go test -v ./tests/ui/... 2>&1 | tee reports/test-output.log | go-junit-report > reports/ui-tests-report.xml\n\
\n\
echo "Test execution finished. Checking reports and screenshots:"\n\
ls -la reports/\n\
ls -la screenshots/\n\
' > run-tests.sh && chmod +x run-tests.sh


RUN echo "UI tests image built successfully!"

# Comando por defecto
CMD ["./run-tests.sh"]
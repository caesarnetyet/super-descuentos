// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package repository

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (id, title, description, url, author_id, likes, expire_time, creation_time)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreatePostParams struct {
	ID           string
	Title        string
	Description  string
	Url          string
	AuthorID     string
	Likes        int64
	ExpireTime   time.Time
	CreationTime time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.AuthorID,
		arg.Likes,
		arg.ExpireTime,
		arg.CreationTime,
	)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT
    id, title, description, url, author_id, likes, expire_time, creation_time
FROM
    posts
where id = ?
`

func (q *Queries) GetPost(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.AuthorID,
		&i.Likes,
		&i.ExpireTime,
		&i.CreationTime,
	)
	return i, err
}

const getPostsWithAuthor = `-- name: GetPostsWithAuthor :many
SELECT
    posts.id, posts.title, posts.description, posts.url, posts.author_id, posts.likes, posts.expire_time, posts.creation_time, users.id, users.name, users.email
FROM
    posts
join users
    on posts.author_id = users.id
ORDER BY
    creation_time DESC
LIMIT ? OFFSET ?
`

type GetPostsWithAuthorParams struct {
	Limit  int64
	Offset int64
}

type GetPostsWithAuthorRow struct {
	Post Post
	User User
}

func (q *Queries) GetPostsWithAuthor(ctx context.Context, arg GetPostsWithAuthorParams) ([]GetPostsWithAuthorRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsWithAuthor, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsWithAuthorRow
	for rows.Next() {
		var i GetPostsWithAuthorRow
		if err := rows.Scan(
			&i.Post.ID,
			&i.Post.Title,
			&i.Post.Description,
			&i.Post.Url,
			&i.Post.AuthorID,
			&i.Post.Likes,
			&i.Post.ExpireTime,
			&i.Post.CreationTime,
			&i.User.ID,
			&i.User.Name,
			&i.User.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, email
FROM users
WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts
SET title = ?, description = ?, url = ?, likes = ?, expire_time = ?
WHERE id = ?
`

type UpdatePostParams struct {
	Title       string
	Description string
	Url         string
	Likes       int64
	ExpireTime  time.Time
	ID          string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.Likes,
		arg.ExpireTime,
		arg.ID,
	)
	return err
}
